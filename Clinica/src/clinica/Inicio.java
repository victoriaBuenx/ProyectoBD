/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clinica;

import clinica.Conexion;
import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.util.Arrays;
import java.util.List;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.util.Date;


/**
 *
 * @author victo
 */
public class Inicio extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    
    private int idHistorialMedicoSeleccionado = -1;
    private int idTratamientoSeleccionado = -1;  
    VisualizarTablas visualizarTab= new VisualizarTablas();
    ValidarCampos validarCamp= new ValidarCampos();
    LimpiarCampos limpiar= new LimpiarCampos();
    

    
    public Inicio() {
        initComponents();
        llenarComboBox();
        verTablaPacientes();
        verTablaDentistas();
        verTablaCitas();
        verTablaHistorialMedico();
        verTablaTratamientos();
        verTablaPagos();
        verTablaProductos();
        verTablaProveedores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombrePaciente = new javax.swing.JTextField();
        txtApellidoPatPaciente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtApellidoMatPaciente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTelefonoPaciente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCorreoPaciente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnRegistrarPacientes = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jdFechaRegistroPaciente = new com.toedter.calendar.JDateChooser();
        jdNacimientoPaciente = new com.toedter.calendar.JDateChooser();
        btnActualizarPacientes = new javax.swing.JButton();
        btnEliminarPacientes = new javax.swing.JButton();
        btnVisualizarPacientes = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtApellidoPartDentista = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        btnRegistrarDentistas = new javax.swing.JButton();
        txtApellidoMatDentista = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jLabel59 = new javax.swing.JLabel();
        txtTelefonoDentistas = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        txtCorreoDentista = new javax.swing.JTextField();
        txtNombreDentista = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        cbxEspecialidadDentista = new javax.swing.JComboBox<>();
        txtHorarioAtencionDentista = new javax.swing.JTextField();
        btnActualizarDentistas = new javax.swing.JButton();
        btnEliminarDentistas = new javax.swing.JButton();
        btnVisualizarDentistas = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        btnRegistrarCitas = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        txtMotivoCita = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaNotas = new javax.swing.JTextArea();
        cbxPacientesCitas = new javax.swing.JComboBox<>();
        cbxDentistasCitas = new javax.swing.JComboBox<>();
        jdFechaCita = new com.toedter.calendar.JDateChooser();
        txtHoraCita = new javax.swing.JTextField();
        btnVisualizarCitas = new javax.swing.JButton();
        btnActualizarCitas = new javax.swing.JButton();
        btnEliminarCitas = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        btnRegistrarHistorial = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        txAreaEnfermedades = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        txAreaMedicacion = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        txAreaAlergias = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        txAreaObservacion = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jpUltimaActHistorial = new com.toedter.calendar.JDateChooser();
        cbxPacientesHistorial = new javax.swing.JComboBox<>();
        btnVisualizarHistorial = new javax.swing.JButton();
        btnActualizarHistorial = new javax.swing.JButton();
        btnEliminarHistorial = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        btnRegistrarTratamiento = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel32 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        cbxDentistasTratamientos = new javax.swing.JComboBox<>();
        jScrollPane14 = new javax.swing.JScrollPane();
        txtAreaDescripcion = new javax.swing.JTextArea();
        cbxNombreTratamiento = new javax.swing.JComboBox<>();
        txtMontoTotal = new javax.swing.JTextField();
        btnVisualizarTratamiento = new javax.swing.JButton();
        btnActualizarTratamiento = new javax.swing.JButton();
        btnEliminarTratamiento = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        cbxPacientesTratamientos = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jpFechaInicioTrat = new com.toedter.calendar.JDateChooser();
        jpFechaFinTrat = new com.toedter.calendar.JDateChooser();
        jPanel7 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        btnRegistarPagos = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        cbxTratamientoPagos = new javax.swing.JComboBox<>();
        cbxMetodoPago = new javax.swing.JComboBox<>();
        cbxModalidadPago = new javax.swing.JComboBox<>();
        jdFechaPago = new com.toedter.calendar.JDateChooser();
        txtMontoPagado = new javax.swing.JTextField();
        btnActualizarPagos = new javax.swing.JButton();
        btnEliminarPagos = new javax.swing.JButton();
        btnVisualizarPagos = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        btnRegistrarProducto = new javax.swing.JButton();
        txtPrecioProducto = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jLabel46 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtNombreProducto = new javax.swing.JTextField();
        jScrollPane15 = new javax.swing.JScrollPane();
        txaDescripcionProducto = new javax.swing.JTextArea();
        btnActualizarProductos = new javax.swing.JButton();
        btnEliminarProductos = new javax.swing.JButton();
        btnVisualizarProductos = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        txtTelefonoProveedor = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        btnRegistrarProveedor = new javax.swing.JButton();
        txtCorreoProveedor = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jLabel52 = new javax.swing.JLabel();
        txtDireccionProveedor = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        txtNombreProovedor = new javax.swing.JTextField();
        txtEmpresaProveedor = new javax.swing.JTextField();
        btnActualizarProveedores = new javax.swing.JButton();
        btnEliminarProveedores = new javax.swing.JButton();
        btnVisualizarProveedores = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(java.awt.Color.white);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 600));

        jTabbedPane2.setToolTipText("");
        jTabbedPane2.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel1.setText("Nombre:");

        jLabel2.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel2.setText("Apellido Paterno:");

        jLabel3.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel3.setText("Apellido Materno:");

        txtApellidoMatPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoMatPacienteActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel4.setText("Fecha de Nacimiento:");

        jLabel5.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel5.setText("Telefono:");

        jLabel6.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel6.setText("Correo:");

        jLabel7.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel7.setText("Fecha de registro:");

        btnRegistrarPacientes.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarPacientes.setText("Registrar");
        btnRegistrarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarPacientesActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nombre", "Apellido Paterno", "Apellido Materno", "Fecha de Nacimiento", "Telefono", "Correo", "Fecha de Registro"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(6).setHeaderValue("Correo");
            jTable1.getColumnModel().getColumn(7).setHeaderValue("Fecha de Registro");
        }

        jdFechaRegistroPaciente.setToolTipText("yyyy/mm/dd");

        jdNacimientoPaciente.setToolTipText("yyyy/mm/dd");

        btnActualizarPacientes.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarPacientes.setText("Actualizar");
        btnActualizarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPacientesActionPerformed(evt);
            }
        });

        btnEliminarPacientes.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarPacientes.setText("Eliminar");
        btnEliminarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPacientesActionPerformed(evt);
            }
        });

        btnVisualizarPacientes.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarPacientes.setText("Visualizar");
        btnVisualizarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarPacientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnRegistrarPacientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnActualizarPacientes))
                    .addComponent(jdNacimientoPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(txtApellidoMatPaciente)
                    .addComponent(txtApellidoPatPaciente)
                    .addComponent(txtTelefonoPaciente)
                    .addComponent(txtNombrePaciente))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(txtCorreoPaciente)
                            .addComponent(jLabel7)
                            .addComponent(jdFechaRegistroPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarPacientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarPacientes)))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombrePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCorreoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtApellidoPatPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdFechaRegistroPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtApellidoMatPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdNacimientoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTelefonoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrarPacientes)
                            .addComponent(btnActualizarPacientes)
                            .addComponent(btnEliminarPacientes)
                            .addComponent(btnVisualizarPacientes))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Pacientes", jPanel2);

        jLabel57.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel57.setText("Apellido Materno:");

        btnRegistrarDentistas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarDentistas.setText("Registrar");
        btnRegistrarDentistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarDentistasActionPerformed(evt);
            }
        });

        jLabel58.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel58.setText("Especialidad:");

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nombre", "Apellido Paterno", "Apellido Materno", "Especialidad", "Telefono", "Correo", "Horario de Atención"
            }
        ));
        jTable9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable9MouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jTable9);

        jLabel59.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel59.setText("Telefono:");

        jLabel60.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel60.setText("Nombre:");

        jLabel61.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel61.setText("Correo:");

        jLabel62.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel62.setText("Apellido Paterno:");

        jLabel63.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel63.setText("Horario de Atención:");

        cbxEspecialidadDentista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Odontopedriata", "Ortodoncista", "Periodoncista", "Endodoncista", "Patologo", "Prostodoncista", "Cirujano" }));
        cbxEspecialidadDentista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEspecialidadDentistaActionPerformed(evt);
            }
        });

        txtHorarioAtencionDentista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHorarioAtencionDentistaActionPerformed(evt);
            }
        });

        btnActualizarDentistas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarDentistas.setText("Actualizar");
        btnActualizarDentistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarDentistasActionPerformed(evt);
            }
        });

        btnEliminarDentistas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarDentistas.setText("Eliminar");
        btnEliminarDentistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarDentistasActionPerformed(evt);
            }
        });

        btnVisualizarDentistas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarDentistas.setText("Visualizar");
        btnVisualizarDentistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarDentistasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnRegistrarDentistas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnActualizarDentistas))
                    .addComponent(cbxEspecialidadDentista, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel59)
                    .addComponent(jLabel58)
                    .addComponent(jLabel57)
                    .addComponent(jLabel62)
                    .addComponent(jLabel60)
                    .addComponent(txtApellidoMatDentista)
                    .addComponent(txtApellidoPartDentista)
                    .addComponent(txtTelefonoDentistas)
                    .addComponent(txtNombreDentista))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel61)
                            .addComponent(txtCorreoDentista, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jLabel63)
                            .addComponent(txtHorarioAtencionDentista)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarDentistas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarDentistas)))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel60)
                            .addComponent(jLabel61))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCorreoDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel62)
                            .addComponent(jLabel63))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellidoPartDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHorarioAtencionDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel57)
                        .addGap(16, 16, 16)
                        .addComponent(txtApellidoMatDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel58)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxEspecialidadDentista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel59)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTelefonoDentistas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrarDentistas)
                            .addComponent(btnActualizarDentistas)
                            .addComponent(btnEliminarDentistas)
                            .addComponent(btnVisualizarDentistas))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Dentistas", jPanel3);

        jLabel15.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel15.setText("Fecha:");

        btnRegistrarCitas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarCitas.setText("Registrar");
        btnRegistrarCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarCitasActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel16.setText("Hora:");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Paciente", "Dentista", "Fecha", "Hora", "Motivo", "Notas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jLabel17.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel17.setText("Motivo:");

        jLabel18.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel18.setText("Paciente:");

        jLabel19.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel19.setText("Notas:");

        jLabel20.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel20.setText("Dentista:");

        txtAreaNotas.setColumns(20);
        txtAreaNotas.setRows(5);
        jScrollPane2.setViewportView(txtAreaNotas);

        jdFechaCita.setToolTipText("yyyy/mm/dd");

        btnVisualizarCitas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarCitas.setText("Visualizar");
        btnVisualizarCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarCitasActionPerformed(evt);
            }
        });

        btnActualizarCitas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarCitas.setText("Actualizar");
        btnActualizarCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarCitasActionPerformed(evt);
            }
        });

        btnEliminarCitas.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarCitas.setText("Eliminar");
        btnEliminarCitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCitasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtHoraCita, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jdFechaCita, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMotivoCita, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cbxPacientesCitas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxDentistasCitas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnRegistrarCitas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizarCitas)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarCitas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarCitas)))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(cbxPacientesCitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxDentistasCitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdFechaCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMotivoCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrarCitas)
                            .addComponent(btnActualizarCitas)
                            .addComponent(btnEliminarCitas)
                            .addComponent(btnVisualizarCitas))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Citas", jPanel4);

        jLabel22.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel22.setText("Enfermedades:");
        jLabel22.setToolTipText("");

        btnRegistrarHistorial.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarHistorial.setText("Registrar");
        btnRegistrarHistorial.setToolTipText("");
        btnRegistrarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarHistorialActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel23.setText("Medicación:");
        jLabel23.setToolTipText("");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Paciente", "Alergias", "Enfermedades", "Medicación", "Observaciones", "Última Actualización"
            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jLabel25.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel25.setText("Paciente:");
        jLabel25.setToolTipText("");

        jLabel26.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel26.setText("Observaciones:");
        jLabel26.setToolTipText("");

        jLabel27.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel27.setText("Alergias:");
        jLabel27.setToolTipText("");

        txAreaEnfermedades.setColumns(20);
        txAreaEnfermedades.setRows(5);
        jScrollPane10.setViewportView(txAreaEnfermedades);

        txAreaMedicacion.setColumns(20);
        txAreaMedicacion.setRows(5);
        jScrollPane11.setViewportView(txAreaMedicacion);

        txAreaAlergias.setColumns(20);
        txAreaAlergias.setRows(5);
        jScrollPane12.setViewportView(txAreaAlergias);

        txAreaObservacion.setColumns(20);
        txAreaObservacion.setRows(5);
        jScrollPane13.setViewportView(txAreaObservacion);

        jLabel8.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel8.setText("Ultima Actualización:");
        jLabel8.setToolTipText("");

        jpUltimaActHistorial.setToolTipText("yyyy/mm/dd");

        btnVisualizarHistorial.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarHistorial.setText("Visualizar");
        btnVisualizarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarHistorialActionPerformed(evt);
            }
        });

        btnActualizarHistorial.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarHistorial.setText("Actualizar");
        btnActualizarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarHistorialActionPerformed(evt);
            }
        });

        btnEliminarHistorial.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarHistorial.setText("Eliminar");
        btnEliminarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel23)
                            .addComponent(jLabel22)
                            .addComponent(jLabel27)
                            .addComponent(jLabel25)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(cbxPacientesHistorial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel26)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jLabel8)
                            .addComponent(jpUltimaActHistorial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnRegistrarHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizarHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarHistorial)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cbxPacientesHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel27))
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnRegistrarHistorial)
                                    .addComponent(btnActualizarHistorial)
                                    .addComponent(btnEliminarHistorial)
                                    .addComponent(btnVisualizarHistorial))
                                .addGap(53, 53, 53))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jpUltimaActHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jTabbedPane2.addTab("Historial Medico", jPanel5);

        jLabel29.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel29.setText("Descripción:");

        btnRegistrarTratamiento.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarTratamiento.setText("Registrar");
        btnRegistrarTratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarTratamientoActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel30.setText("Monto Total:");

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Dentista", "Paciente", "Tratamiento", "Descripcion", "Fecha de Inicio", "Fecha Fin", "Monto Total"
            }
        ));
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jLabel32.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel32.setText("Dentista:");

        jLabel34.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel34.setText("Nombre del tratamiento:");

        txtAreaDescripcion.setColumns(20);
        txtAreaDescripcion.setRows(5);
        jScrollPane14.setViewportView(txtAreaDescripcion);

        cbxNombreTratamiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Limpieza", "Profilaxis", "Fluorización", "Sellado de fisuras", "Relleno dental", "Corona", "Implante", "Endodoncia", "Extracción", "Cirugía de tercer molar", "Ortodoncia", "Gingivitis", "Blanqueamiento", "Carillas" }));

        btnVisualizarTratamiento.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarTratamiento.setText("Visualizar");
        btnVisualizarTratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarTratamientoActionPerformed(evt);
            }
        });

        btnActualizarTratamiento.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarTratamiento.setText("Actualizar");
        btnActualizarTratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarTratamientoActionPerformed(evt);
            }
        });

        btnEliminarTratamiento.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarTratamiento.setText("Eliminar");
        btnEliminarTratamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarTratamientoActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel33.setText("Paciente:");

        cbxPacientesTratamientos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel35.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel35.setText("Fecha de Inicio:");

        jLabel40.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel40.setText("Fecha de Finalizacion:");

        jpFechaInicioTrat.setToolTipText("yyyy/mm/dd");

        jpFechaFinTrat.setToolTipText("yyyy/mm/dd");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(btnRegistrarTratamiento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActualizarTratamiento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEliminarTratamiento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVisualizarTratamiento))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addGap(176, 176, 176)
                                .addComponent(jLabel40)))
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel34)
                            .addComponent(jLabel32)
                            .addComponent(cbxDentistasTratamientos, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cbxPacientesTratamientos, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(cbxNombreTratamiento, javax.swing.GroupLayout.Alignment.LEADING, 0, 179, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMontoTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jLabel30)
                            .addComponent(jLabel35)
                            .addComponent(jpFechaInicioTrat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpFechaFinTrat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(jLabel35))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbxDentistasTratamientos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpFechaInicioTrat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(jLabel40))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbxPacientesTratamientos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpFechaFinTrat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxNombreTratamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrarTratamiento)
                            .addComponent(btnActualizarTratamiento)
                            .addComponent(btnEliminarTratamiento)
                            .addComponent(btnVisualizarTratamiento))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Tratamientos", jPanel6);

        jLabel36.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel36.setText("Fecha de pago:");

        btnRegistarPagos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistarPagos.setText("Registrar");
        btnRegistarPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistarPagosActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel37.setText("Monto Pagado:");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Tratamiento", "Metodo de Pago", "Fecha de pago", "Modalidad de pago", "Monto Pagado"
            }
        ));
        jTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable6MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTable6);

        jLabel38.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel38.setText("Modalidad de pago:");

        jLabel39.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel39.setText("Tratamiento:");

        jLabel41.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel41.setText("Metodo de Pago:");

        cbxTratamientoPagos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Limpieza", "Profilaxis", "Fluorización", "Sellado de fisuras", "Relleno dental", "Corona", "Implante", "Endodoncia", "Extracción", "Cirugía de tercer molar", "Ortodoncia", "Gingivitis", "Blanqueamiento", "Carillas" }));

        cbxMetodoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Tarjeta" }));

        cbxModalidadPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Abono", "Completo" }));

        jdFechaPago.setToolTipText("yyyy/mm/dd");

        btnActualizarPagos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarPagos.setText("Actualizar");
        btnActualizarPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPagosActionPerformed(evt);
            }
        });

        btnEliminarPagos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarPagos.setText("Eliminar");
        btnEliminarPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPagosActionPerformed(evt);
            }
        });

        btnVisualizarPagos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarPagos.setText("Visualizar");
        btnVisualizarPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarPagosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbxModalidadPago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel36)
                        .addComponent(jLabel41)
                        .addComponent(jLabel39)
                        .addComponent(cbxTratamientoPagos, 0, 179, Short.MAX_VALUE)
                        .addComponent(cbxMetodoPago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jdFechaPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel37)
                    .addComponent(txtMontoPagado, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnRegistarPagos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizarPagos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarPagos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarPagos)))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addGap(7, 7, 7)
                        .addComponent(cbxTratamientoPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdFechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxModalidadPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMontoPagado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistarPagos)
                            .addComponent(btnActualizarPagos)
                            .addComponent(btnEliminarPagos)
                            .addComponent(btnVisualizarPagos))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Pagos", jPanel7);

        jLabel43.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel43.setText("Precio Unitario:");

        btnRegistrarProducto.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarProducto.setText("Registrar");
        btnRegistrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarProductoActionPerformed(evt);
            }
        });

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "Nombre del prducto", "Descripción", "Precio Unitario"
            }
        ));
        jTable7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable7MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTable7);

        jLabel46.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel46.setText("Nombre del producto:");

        jLabel48.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel48.setText("Descripción:");

        txaDescripcionProducto.setColumns(20);
        txaDescripcionProducto.setRows(5);
        jScrollPane15.setViewportView(txaDescripcionProducto);

        btnActualizarProductos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarProductos.setText("Actualizar");
        btnActualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProductosActionPerformed(evt);
            }
        });

        btnEliminarProductos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarProductos.setText("Eliminar");
        btnEliminarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProductosActionPerformed(evt);
            }
        });

        btnVisualizarProductos.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarProductos.setText("Visualizar");
        btnVisualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarProductosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel43)
                        .addComponent(jLabel48)
                        .addComponent(jLabel46)
                        .addComponent(txtPrecioProducto)
                        .addComponent(txtNombreProducto)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(btnRegistrarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizarProductos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarProductos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarProductos)))
                .addGap(100, 100, 100)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel48)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPrecioProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrarProducto)
                            .addComponent(btnActualizarProductos)
                            .addComponent(btnEliminarProductos)
                            .addComponent(btnVisualizarProductos))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Productos", jPanel8);

        jLabel50.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel50.setText("Correo:");

        btnRegistrarProveedor.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnRegistrarProveedor.setText("Registrar");
        btnRegistrarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarProveedorActionPerformed(evt);
            }
        });

        jLabel51.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel51.setText("Empresa:");

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nombre", "Telefono", "Correo", "Empresa", "Direccion"
            }
        ));
        jTable8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable8MouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTable8);

        jLabel52.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel52.setText("Dirección:");

        jLabel53.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel53.setText("Nombre:");

        jLabel55.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel55.setText("Telefono:");

        btnActualizarProveedores.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnActualizarProveedores.setText("Actualizar");
        btnActualizarProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProveedoresActionPerformed(evt);
            }
        });

        btnEliminarProveedores.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnEliminarProveedores.setText("Eliminar");
        btnEliminarProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProveedoresActionPerformed(evt);
            }
        });

        btnVisualizarProveedores.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        btnVisualizarProveedores.setText("Vizualizar");
        btnVisualizarProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarProveedoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel52)
                        .addComponent(jLabel51)
                        .addComponent(jLabel50)
                        .addComponent(jLabel55)
                        .addComponent(jLabel53)
                        .addComponent(txtCorreoProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                        .addComponent(txtTelefonoProveedor)
                        .addComponent(txtDireccionProveedor)
                        .addComponent(txtNombreProovedor)
                        .addComponent(txtEmpresaProveedor))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btnRegistrarProveedor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizarProveedores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarProveedores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVisualizarProveedores)))
                .addGap(100, 100, 100)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel53)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreProovedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel55)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTelefonoProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCorreoProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel51)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmpresaProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel52)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDireccionProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrarProveedor)
                            .addComponent(btnActualizarProveedores)
                            .addComponent(btnEliminarProveedores)
                            .addComponent(btnVisualizarProveedores))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Proveedores", jPanel9);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarPacientesActionPerformed
        // TODO add your handling code here:
       if (validarCamposPacientes()) {
            String nombre = txtNombrePaciente.getText();
            String apellidoPaterno = txtApellidoPatPaciente.getText();
            String apellidoMaterno = txtApellidoMatPaciente.getText();
            Date fechaNacimiento = jdNacimientoPaciente.getDate(); 
            String telefono = txtTelefonoPaciente.getText();
            String correo = txtCorreoPaciente.getText();
            Date fechaRegistro = jdFechaRegistroPaciente.getDate();
            
            PacientesDao pacientesDao = new PacientesDao();
            boolean resultado = pacientesDao.insertarPaciente(
                nombre, apellidoPaterno, apellidoMaterno, fechaNacimiento, telefono, correo, fechaRegistro);
            
            if (resultado) { 
                verTablaPacientes();
                limpiar.limpiarCampos(txtNombrePaciente, txtApellidoPatPaciente, txtApellidoMatPaciente, jdNacimientoPaciente, txtTelefonoPaciente, 
                        txtCorreoPaciente, jdFechaRegistroPaciente);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo registrar el paciente.", "Error", JOptionPane.ERROR_MESSAGE);
            }    
        }
    }//GEN-LAST:event_btnRegistrarPacientesActionPerformed

    private void cbxEspecialidadDentistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEspecialidadDentistaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxEspecialidadDentistaActionPerformed

    private void btnRegistrarDentistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarDentistasActionPerformed
        // TODO add your handling code here:
         if (validarCamposDentistas()) {
            String nombre = txtNombreDentista.getText();
            String apellidoPaterno = txtApellidoPartDentista.getText();
            String apellidoMaterno = txtApellidoMatDentista.getText();
            String especialidad = cbxEspecialidadDentista.getSelectedItem().toString();
            String telefono = txtTelefonoDentistas.getText();
            String correo = txtCorreoDentista.getText();
            String horarioAtencion = txtHorarioAtencionDentista.getText();

            DentistasDao dentistasDao = new DentistasDao();
            boolean resultado = dentistasDao.insertarDentista(
                nombre, apellidoPaterno, apellidoMaterno, especialidad, telefono, correo, horarioAtencion);
            if (resultado) {
                verTablaDentistas();
                limpiar.limpiarCampos(txtNombreDentista, txtApellidoPartDentista, txtApellidoMatDentista, cbxEspecialidadDentista, txtTelefonoDentistas, txtCorreoDentista, txtHorarioAtencionDentista);

            } else {
                JOptionPane.showMessageDialog(this, "No se pudo registrar el dentista.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegistrarDentistasActionPerformed

    private void btnRegistrarCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarCitasActionPerformed
        // TODO add your handling code here:
            if (validarCamposCitas()) {
                int idPaciente = Integer.parseInt(cbxPacientesCitas.getSelectedItem().toString().split("-")[0].trim());  
                int idDentista = Integer.parseInt(cbxDentistasCitas.getSelectedItem().toString().split("-")[0].trim());  
                Date fecha = jdFechaCita.getDate(); 
                String hora = txtHoraCita.getText();
                String motivo = txtMotivoCita.getText();
                String notas = txtAreaNotas.getText();
                
                CitasDao citasDao = new CitasDao();
                boolean resultado = citasDao.insertarCita(idPaciente, idDentista, fecha, hora, motivo, notas);
                if (resultado) {
                    verTablaCitas();  
                    llenarComboBox(); 
                    limpiar.limpiarCampos(cbxPacientesCitas, cbxDentistasCitas, jdFechaCita, txtHoraCita, txtMotivoCita, txtAreaNotas);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar la cita.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_btnRegistrarCitasActionPerformed

    private void btnRegistrarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarHistorialActionPerformed
        // TODO add your handling code here:
            if (validarCamposHistorialMedico()) {
                int idPaciente = obtenerIdPacienteSeleccionado();  
                String alergias = txAreaAlergias.getText();
                String enfermedades = txAreaEnfermedades.getText();
                String medicacion = txAreaMedicacion.getText();
                String observaciones = txAreaObservacion.getText();
                if (observaciones.isEmpty()) {
                    observaciones = null;  
                }
                Date ultimaActualizacion = jpUltimaActHistorial.getDate();

                HistorialMedicoDao historialDao = new HistorialMedicoDao();
                boolean resultado = historialDao.insertarHistorialMedico(idPaciente, alergias, enfermedades, medicacion, observaciones, ultimaActualizacion);
                if (resultado) {
                    verTablaHistorialMedico();
                    limpiar.limpiarCampos(cbxPacientesHistorial, txAreaAlergias, txAreaEnfermedades, txAreaMedicacion, txAreaObservacion, jpUltimaActHistorial);  
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar el historial médico.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_btnRegistrarHistorialActionPerformed

    private void btnRegistrarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarProveedorActionPerformed
        // TODO add your handling code here:
            if (validarCamposProveedores()) {
                String nombre = txtNombreProovedor.getText();
                String telefono = txtTelefonoProveedor.getText();
                String correo = txtCorreoProveedor.getText();
                String empresa = txtEmpresaProveedor.getText();
                String direccion = txtDireccionProveedor.getText();

                ProveedoresDao proveedoresDao = new ProveedoresDao();
                boolean resultado = proveedoresDao.insertarTablaProveedores(nombre, telefono, correo, empresa, direccion);
                if (resultado) {
                    verTablaProveedores();
                    limpiar.limpiarCampos(txtNombreProovedor, txtTelefonoProveedor, txtCorreoProveedor, txtEmpresaProveedor, txtDireccionProveedor);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar el proveedor.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_btnRegistrarProveedorActionPerformed

    private void txtHorarioAtencionDentistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHorarioAtencionDentistaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHorarioAtencionDentistaActionPerformed

    private void txtApellidoMatPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoMatPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoMatPacienteActionPerformed

    private void btnRegistrarTratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarTratamientoActionPerformed
        // TODO add your handling code here:
            if (validarCamposTratamientos()) {
                int idDentista = Integer.parseInt(cbxDentistasTratamientos.getSelectedItem().toString().split("-")[0].trim());
                String nombre = cbxNombreTratamiento.getSelectedItem().toString();
                String descripcion = txtAreaDescripcion.getText();
                Date FechaInicio = jpFechaInicioTrat.getDate();
                Date FechaFin = jpFechaFinTrat.getDate();
                int montoTotal;

                try {
                    montoTotal = Integer.parseInt(txtMontoTotal.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ingrese un monto válido", "Error", JOptionPane.ERROR_MESSAGE);
                    montoTotal = 0;
                }

                TratamientosDao tratamientosDao = new TratamientosDao();
                int idTratamiento = tratamientosDao.insertarTratamiento(idDentista, nombre, descripcion, montoTotal);

                if (idTratamiento != -1) {  

                    int idPaciente = Integer.parseInt(cbxPacientesTratamientos.getSelectedItem().toString().split("-")[0].trim());
                    PacientesTratamientosDao pacientesTratDao = new PacientesTratamientosDao();
                    boolean resultado = pacientesTratDao.insertarPacienteTratamiento(idPaciente, idTratamiento, FechaInicio, FechaFin);

                    if (resultado) {
                        verTablaTratamientos();
                        llenarComboBox();
                        limpiar.limpiarCampos(cbxDentistasTratamientos, cbxNombreTratamiento, txtAreaDescripcion, txtMontoTotal, cbxPacientesTratamientos, jpFechaInicioTrat, jpFechaFinTrat);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo registrar el paciente tratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar el tratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_btnRegistrarTratamientoActionPerformed

    private void btnRegistarPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistarPagosActionPerformed
        // TODO add your handling code here:
        if (validarCamposPagos()) {
                int idTratamiento = Integer.parseInt(cbxTratamientoPagos.getSelectedItem().toString().split("-")[0].trim());
                String metodoPago = cbxMetodoPago.getSelectedItem().toString();
                Date fechaPago= jdFechaPago.getDate();
                String modalidadPago= cbxModalidadPago.getSelectedItem().toString();
                int montoPagado;
                try{
                    montoPagado= Integer.parseInt(txtMontoPagado.getText());
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "Ingrese un monto valido", "Error", JOptionPane.ERROR_MESSAGE);
                    montoPagado= 0;
                }
                
                PagosDao pagosDao = new PagosDao();
                boolean resultado = pagosDao.insertarPagos(idTratamiento, metodoPago, fechaPago, modalidadPago, montoPagado);
                if (resultado) {
                    verTablaPagos();
                    llenarComboBox();
                    limpiar.limpiarCampos(cbxTratamientoPagos, cbxMetodoPago, jdFechaPago, txtMontoPagado, cbxModalidadPago);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo registrar el Pago.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_btnRegistarPagosActionPerformed

    private void btnRegistrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarProductoActionPerformed
        // TODO add your handling code here:
         if (validarCamposProductos()) {
            String nombreProducto = txtNombreProducto.getText();
            String descripcion = txaDescripcionProducto.getText();
            int precioUnitario;
            try {
                precioUnitario = Integer.parseInt(txtPrecioProducto.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un monto valido", "Error", JOptionPane.ERROR_MESSAGE);
                precioUnitario = 0;
            }

            ProductosDao productosDao = new ProductosDao();
            boolean resultado = productosDao.insertarProductos(nombreProducto, descripcion, precioUnitario);
            if (resultado) {
                verTablaProductos();
                limpiar.limpiarCampos(txtNombreProducto, txaDescripcionProducto, txtPrecioProducto);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo registrar el Producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegistrarProductoActionPerformed

    private void btnVisualizarCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarCitasActionPerformed
        // TODO add your handling code here:
        llenarComboBox(); 
        verTablaCitas();  
        JOptionPane.showMessageDialog(this, "Datos actualizados correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnVisualizarCitasActionPerformed

    private void btnActualizarCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarCitasActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable3.getSelectedRow();
            if (filaSeleccionada != -1) {

            int idCita = (int)jTable3.getValueAt(filaSeleccionada, 0); 
            int idPaciente = Integer.parseInt(cbxPacientesCitas.getSelectedItem().toString().split("-")[0].trim());  
            int idDentista = Integer.parseInt(cbxDentistasCitas.getSelectedItem().toString().split("-")[0].trim());
            Date fecha = jdFechaCita.getDate();
            String hora = txtHoraCita.getText();
            String motivo = txtMotivoCita.getText();
            String notas = txtAreaNotas.getText();
            
            if(validarCamposCitas()){
                CitasDao citasDao = new CitasDao();
                boolean resultado = citasDao.actualizarCita(idCita, idPaciente, idDentista, fecha, hora, motivo, notas);
               
                if (resultado) {
                    verTablaCitas();
                }
            }
        }else {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una cita de la tabla." , "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(cbxPacientesCitas, cbxDentistasCitas, jdFechaCita, txtHoraCita, txtMotivoCita, txtAreaNotas);
    }//GEN-LAST:event_btnActualizarCitasActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable3.getSelectedRow();
        if (filaSeleccionada != -1) {
            cbxPacientesCitas.setSelectedItem(jTable3.getValueAt(filaSeleccionada, 1).toString());
            cbxDentistasCitas.setSelectedItem(jTable3.getValueAt(filaSeleccionada, 2).toString());
            jdFechaCita.setDate((Date) jTable3.getValueAt(filaSeleccionada, 3));
            txtHoraCita.setText(jTable3.getValueAt(filaSeleccionada, 4).toString());
            txtMotivoCita.setText(jTable3.getValueAt(filaSeleccionada, 5).toString());

            Object notas = jTable3.getValueAt(filaSeleccionada, 6);
            txtAreaNotas.setText(notas == null ? "" : notas.toString()); 
        }
    }//GEN-LAST:event_jTable3MouseClicked

    private void btnEliminarCitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCitasActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable3.getSelectedRow();

        if (filaSeleccionada != -1) { 
            int idCita = (int) jTable3.getValueAt(filaSeleccionada, 0); 

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar la cita seleccionada?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                CitasDao citasDao = new CitasDao();
                boolean resultado = citasDao.eliminarCita(idCita);
                
                if (resultado) {
                    verTablaCitas();
                    limpiar.limpiarCampos(cbxPacientesCitas, cbxDentistasCitas, jdFechaCita, txtHoraCita, txtMotivoCita, txtAreaNotas);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar la cita.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una cita de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarCitasActionPerformed

    private void btnVisualizarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarHistorialActionPerformed
        // TODO add your handling code here:
        llenarComboBox();  
        verTablaHistorialMedico();
        JOptionPane.showMessageDialog(this, "Datos actualizados correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnVisualizarHistorialActionPerformed

    private void btnActualizarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarHistorialActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable4.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idHistorialMedico = (int) jTable4.getValueAt(filaSeleccionada, 0);
            int idPaciente = Integer.parseInt(cbxPacientesHistorial.getSelectedItem().toString().split("-")[0].trim());
            String alergias = txAreaAlergias.getText();
            String enfermedades = txAreaEnfermedades.getText();
            String medicacion = txAreaMedicacion.getText();
            String observaciones = txAreaObservacion.getText();
            if (observaciones.isEmpty()) {
                observaciones = null;
            }
            Date ultimaActualizacion = jpUltimaActHistorial.getDate();

            if (validarCamposHistorialMedico()) {
                HistorialMedicoDao historialDao = new HistorialMedicoDao();
                boolean resultado = historialDao.actualizarHistorialMedico(idHistorialMedico, idPaciente, alergias, enfermedades, 
                                                                          medicacion, observaciones, ultimaActualizacion);

                if (resultado) {
                    verTablaHistorialMedico();  
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Por favor selecciona un historial médico de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(cbxPacientesHistorial, txAreaAlergias, txAreaEnfermedades, txAreaMedicacion, txAreaObservacion, jpUltimaActHistorial);
    }//GEN-LAST:event_btnActualizarHistorialActionPerformed

    private void btnEliminarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarHistorialActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable4.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idHistorialMedico = (int) jTable4.getValueAt(filaSeleccionada, 0);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar el historial médico seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                HistorialMedicoDao historialDao = new HistorialMedicoDao();
                boolean resultado = historialDao.eliminarHistorialMedico(idHistorialMedico);

                if (resultado) {
                    verTablaHistorialMedico(); 
                    limpiar.limpiarCampos(cbxPacientesHistorial, txAreaAlergias, txAreaEnfermedades, txAreaMedicacion, txAreaObservacion, jpUltimaActHistorial);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el historial médico.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Por favor seleccione un historial médico de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarHistorialActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
        
        int filaSeleccionada = jTable4.getSelectedRow();
        if (filaSeleccionada != -1) {
            idHistorialMedicoSeleccionado = (int) jTable4.getValueAt(filaSeleccionada, 0);

            cbxPacientesHistorial.setSelectedItem(jTable4.getValueAt(filaSeleccionada, 1).toString());
            txAreaAlergias.setText(jTable4.getValueAt(filaSeleccionada, 2).toString());
            txAreaEnfermedades.setText(jTable4.getValueAt(filaSeleccionada, 3).toString());
            txAreaMedicacion.setText(jTable4.getValueAt(filaSeleccionada, 4).toString());

            Object observaciones = jTable4.getValueAt(filaSeleccionada, 5);
            txAreaObservacion.setText(observaciones == null ? "" : observaciones.toString());

            Object fechaUltimaActualizacion = jTable4.getValueAt(filaSeleccionada, 6);
            if (fechaUltimaActualizacion instanceof Date) {
                jpUltimaActHistorial.setDate((Date) fechaUltimaActualizacion);
            } else {
                jpUltimaActHistorial.setDate(null);
            }
        }
    }//GEN-LAST:event_jTable4MouseClicked

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable5.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idTratamiento = Integer.parseInt(jTable5.getValueAt(filaSeleccionada, 0).toString());
            cbxDentistasTratamientos.setSelectedItem(jTable5.getValueAt(filaSeleccionada, 1).toString());
            cbxPacientesTratamientos.setSelectedItem(jTable5.getValueAt(filaSeleccionada, 2).toString());
            cbxNombreTratamiento.setSelectedItem(jTable5.getValueAt(filaSeleccionada, 3).toString());
            txtAreaDescripcion.setText(jTable5.getValueAt(filaSeleccionada, 4).toString());
            jpFechaInicioTrat.setDate((Date) jTable5.getValueAt(filaSeleccionada, 5));
            jpFechaFinTrat.setDate((Date) jTable5.getValueAt(filaSeleccionada, 6));
            txtMontoTotal.setText(jTable5.getValueAt(filaSeleccionada, 7).toString());

            idTratamientoSeleccionado = idTratamiento;
        }
    }//GEN-LAST:event_jTable5MouseClicked

    private void btnVisualizarTratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarTratamientoActionPerformed
        // TODO add your handling code here:
        llenarComboBox(); 
        verTablaTratamientos();
        JOptionPane.showMessageDialog(this, "Datos actualizados correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnVisualizarTratamientoActionPerformed

    private void btnActualizarTratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarTratamientoActionPerformed
        // TODO add your handling code here:
            int filaSeleccionada = jTable5.getSelectedRow();
            if (filaSeleccionada != -1) {
                int idTratamiento = (int) jTable5.getValueAt(filaSeleccionada, 0);
                int idDentista = Integer.parseInt(cbxDentistasTratamientos.getSelectedItem().toString().split("-")[0].trim());
                String nombre = cbxNombreTratamiento.getSelectedItem().toString();
                String descripcion = txtAreaDescripcion.getText();
                int montoTotal;

                try {
                    montoTotal = Integer.parseInt(txtMontoTotal.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ingrese un monto válido", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                TratamientosDao tratamientosDao = new TratamientosDao();
                boolean resultadoTratamiento = tratamientosDao.actualizarTratamiento(idTratamiento, idDentista, nombre, descripcion, montoTotal);

                if (resultadoTratamiento) {
                    int idPaciente = Integer.parseInt(cbxPacientesTratamientos.getSelectedItem().toString().split("-")[0].trim());
                    PacientesTratamientosDao pacientesTratDao= new PacientesTratamientosDao();

                    int idPacienteTratamiento = pacientesTratDao.obtenerIdPacienteTratamiento(idPaciente, idTratamiento);

                    Date fechaInicio = jpFechaInicioTrat.getDate();
                    Date fechaFin = jpFechaFinTrat.getDate();

                    boolean resultadoPacienteTrat = pacientesTratDao.actualizarPacienteTratamiento(idPacienteTratamiento, idPaciente, idTratamiento, fechaInicio, fechaFin);

                    if (resultadoPacienteTrat) {
                        verTablaTratamientos();
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo actualizar el PacienteTratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar el Tratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            limpiar.limpiarCampos(cbxDentistasTratamientos, cbxNombreTratamiento, txtAreaDescripcion, txtMontoTotal, cbxPacientesTratamientos, jpFechaInicioTrat, jpFechaFinTrat);
    }//GEN-LAST:event_btnActualizarTratamientoActionPerformed

    private void btnEliminarTratamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarTratamientoActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable5.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idTratamiento= (int)jTable5.getValueAt(filaSeleccionada, 0);
            
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar el tratamiento seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            
            if (confirmacion == JOptionPane.YES_OPTION) {
                TratamientosDao tratamientosDao = new TratamientosDao();
                boolean resultado = tratamientosDao.eliminarTratamiento(idTratamiento);

                if (resultado) {
                    verTablaTratamientos();
                    limpiar.limpiarCampos(cbxDentistasTratamientos, cbxNombreTratamiento, txtAreaDescripcion, txtMontoTotal, cbxPacientesTratamientos, jpFechaInicioTrat, jpFechaFinTrat);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el tratamiento.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un tratamiento de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarTratamientoActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada != -1) {
            txtNombrePaciente.setText(jTable1.getValueAt(filaSeleccionada, 1).toString());
            txtApellidoPatPaciente.setText(jTable1.getValueAt(filaSeleccionada, 2).toString());
            txtApellidoMatPaciente.setText(jTable1.getValueAt(filaSeleccionada, 3).toString());
            jdNacimientoPaciente.setDate((Date) jTable1.getValueAt(filaSeleccionada, 4));
            txtTelefonoPaciente.setText(jTable1.getValueAt(filaSeleccionada, 5).toString());
            txtCorreoPaciente.setText(jTable1.getValueAt(filaSeleccionada, 6).toString());
            jdFechaRegistroPaciente.setDate((Date) jTable1.getValueAt(filaSeleccionada, 7));
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnVisualizarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarPacientesActionPerformed
        // TODO add your handling code here:
        verTablaPacientes();  
        JOptionPane.showMessageDialog(this, "Datos de pacientes actualizados.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnVisualizarPacientesActionPerformed

    private void btnActualizarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPacientesActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idPaciente = (int) jTable1.getValueAt(filaSeleccionada, 0); 

            String nombre = txtNombrePaciente.getText();
            String apellidoPaterno = txtApellidoPatPaciente.getText();
            String apellidoMaterno = txtApellidoMatPaciente.getText();
            Date fechaNacimiento = jdNacimientoPaciente.getDate();
            String telefono = txtTelefonoPaciente.getText();
            String correo = txtCorreoPaciente.getText();
            Date fechaRegistro = jdFechaRegistroPaciente.getDate();

            if (validarCamposPacientes()) {
                PacientesDao pacientesDao = new PacientesDao();
                boolean resultado = pacientesDao.actualizarPaciente(idPaciente, nombre, apellidoPaterno, apellidoMaterno,
                        fechaNacimiento, telefono, correo, fechaRegistro);

                if (resultado) {
                    verTablaPacientes();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un paciente de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(txtNombrePaciente, txtApellidoPatPaciente, txtApellidoMatPaciente, jdNacimientoPaciente, 
                                  txtTelefonoPaciente, txtCorreoPaciente, jdFechaRegistroPaciente);
    }//GEN-LAST:event_btnActualizarPacientesActionPerformed

    private void btnEliminarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPacientesActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idPaciente = (int) jTable1.getValueAt(filaSeleccionada, 0); 

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar al paciente seleccionado?", 
                                                             "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                PacientesDao pacientesDao = new PacientesDao();
                boolean resultado = pacientesDao.eliminarPaciente(idPaciente);

                if (resultado) {
                    verTablaPacientes(); 
                    limpiar.limpiarCampos(txtNombrePaciente, txtApellidoPatPaciente, txtApellidoMatPaciente, jdNacimientoPaciente, 
                                  txtTelefonoPaciente, txtCorreoPaciente, jdFechaRegistroPaciente);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el paciente.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un paciente de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarPacientesActionPerformed

    private void jTable9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable9MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable9.getSelectedRow();
    
        if (filaSeleccionada != -1) {
            txtNombreDentista.setText(jTable9.getValueAt(filaSeleccionada, 1).toString());
            txtApellidoPartDentista.setText(jTable9.getValueAt(filaSeleccionada, 2).toString());
            txtApellidoMatDentista.setText(jTable9.getValueAt(filaSeleccionada, 3).toString());
            cbxEspecialidadDentista.setSelectedItem(jTable9.getValueAt(filaSeleccionada, 4).toString());
            txtTelefonoDentistas.setText(jTable9.getValueAt(filaSeleccionada, 5).toString());
            txtCorreoDentista.setText(jTable9.getValueAt(filaSeleccionada, 6).toString());
            txtHorarioAtencionDentista.setText(jTable9.getValueAt(filaSeleccionada, 7).toString());
        }
    }//GEN-LAST:event_jTable9MouseClicked

    private void btnActualizarDentistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarDentistasActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable9.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idDentista = (int) jTable9.getValueAt(filaSeleccionada, 0);
            String nombre = txtNombreDentista.getText();
            String apellidoPaterno = txtApellidoPartDentista.getText();
            String apellidoMaterno = txtApellidoMatDentista.getText();
            String especialidad = cbxEspecialidadDentista.getSelectedItem().toString();
            String telefono = txtTelefonoDentistas.getText();
            String correo = txtCorreoDentista.getText();
            String horarioAtencion = txtHorarioAtencionDentista.getText();

            if (validarCamposDentistas()) {
                DentistasDao dentistasDao = new DentistasDao();
                boolean resultado = dentistasDao.actualizarDentista(idDentista, nombre, apellidoPaterno, apellidoMaterno, especialidad, telefono, correo, horarioAtencion);
                
                if (resultado) {
                    verTablaDentistas();
                } 
            }   
        }else{
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un dentista de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(txtNombreDentista, txtApellidoPartDentista, txtApellidoMatDentista, cbxEspecialidadDentista, txtTelefonoDentistas, txtCorreoDentista, txtHorarioAtencionDentista);
    }//GEN-LAST:event_btnActualizarDentistasActionPerformed

    private void btnEliminarDentistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarDentistasActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable9.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idDentista = (int) jTable9.getValueAt(filaSeleccionada, 0);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar al dentista seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                DentistasDao dentistasDao = new DentistasDao();
                boolean resultado = dentistasDao.eliminarDentista(idDentista);
                
                if (resultado) {
                    verTablaDentistas();
                    limpiar.limpiarCampos(txtNombreDentista, txtApellidoPartDentista, txtApellidoMatDentista, cbxEspecialidadDentista, txtTelefonoDentistas, txtCorreoDentista, txtHorarioAtencionDentista);

                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el dentista.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un dentista de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarDentistasActionPerformed

    private void btnVisualizarDentistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarDentistasActionPerformed
        // TODO add your handling code here:
        verTablaDentistas();
        JOptionPane.showMessageDialog(this, "Datos de dentistas actualizados.", "Información", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnVisualizarDentistasActionPerformed

    private void jTable6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable6MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable6.getSelectedRow();

        if (filaSeleccionada != -1) {
            cbxTratamientoPagos.setSelectedItem(jTable6.getValueAt(filaSeleccionada, 1).toString());
            cbxMetodoPago.setSelectedItem(jTable6.getValueAt(filaSeleccionada, 2).toString());
            jdFechaPago.setDate(java.sql.Date.valueOf(jTable6.getValueAt(filaSeleccionada, 3).toString()));
            cbxModalidadPago.setSelectedItem(jTable6.getValueAt(filaSeleccionada, 4).toString());
            txtMontoPagado.setText(jTable6.getValueAt(filaSeleccionada, 5).toString());
        }
    }//GEN-LAST:event_jTable6MouseClicked

    private void btnActualizarPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPagosActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable6.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idPago = (int) jTable6.getValueAt(filaSeleccionada, 0);
            int idTratamiento = Integer.parseInt(cbxTratamientoPagos.getSelectedItem().toString().split("-")[0].trim());
            String metodoPago = cbxMetodoPago.getSelectedItem().toString();
            Date fechaPago = jdFechaPago.getDate();
            String modalidadPago = cbxModalidadPago.getSelectedItem().toString();
            int montoPagado;
                 try{
                     montoPagado= Integer.parseInt(txtMontoPagado.getText());
                 }catch(NumberFormatException e){
                     JOptionPane.showMessageDialog(null, "Ingrese un monto valido", "Error", JOptionPane.ERROR_MESSAGE);
                     montoPagado= 0;
                 }

            if (validarCamposPagos()) {
                PagosDao pagosDao = new PagosDao();
                boolean resultado = pagosDao.actualizarPago(idPago, idTratamiento, metodoPago, fechaPago, modalidadPago, montoPagado);

                if (resultado) {
                    verTablaPagos();
                } 
            }
        }else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un pago de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(cbxTratamientoPagos, cbxMetodoPago, jdFechaPago, txtMontoPagado, cbxModalidadPago);
    }//GEN-LAST:event_btnActualizarPagosActionPerformed

    private void btnEliminarPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPagosActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable6.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idPago = (int) jTable6.getValueAt(filaSeleccionada, 0);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar el pago seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                PagosDao pagosDao = new PagosDao();
                boolean resultado = pagosDao.eliminarPago(idPago);

                if (resultado) {
                    verTablaPagos();
                    limpiar.limpiarCampos(cbxTratamientoPagos, cbxMetodoPago, jdFechaPago, txtMontoPagado, cbxModalidadPago);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el pago.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un pago de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarPagosActionPerformed

    private void btnVisualizarPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarPagosActionPerformed
        // TODO add your handling code here:
        verTablaPagos(); 
        JOptionPane.showMessageDialog(this, "Datos de pagos actualizados.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnVisualizarPagosActionPerformed

    private void jTable7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable7MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable7.getSelectedRow();
        if (filaSeleccionada != -1) {
            String nombreProducto = (String) jTable7.getValueAt(filaSeleccionada, 1);
            String descripcion = (String) jTable7.getValueAt(filaSeleccionada, 2);
            int precioUnitario = (int) jTable7.getValueAt(filaSeleccionada, 3);

            txtNombreProducto.setText(nombreProducto);
            txaDescripcionProducto.setText(descripcion);
            txtPrecioProducto.setText(String.valueOf(precioUnitario));
        }
    }//GEN-LAST:event_jTable7MouseClicked

    private void btnActualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProductosActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable7.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idProducto = (int) jTable7.getValueAt(filaSeleccionada, 0);
            String nombreProducto = txtNombreProducto.getText();
            String descripcion = txaDescripcionProducto.getText();
            int precioUnitario;
            try {
                precioUnitario = Integer.parseInt(txtPrecioProducto.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un monto valido", "Error", JOptionPane.ERROR_MESSAGE);
                precioUnitario = 0;
            }
            
            if (validarCamposProductos()){
                ProductosDao productosDao = new ProductosDao();
                boolean resultado = productosDao.actualizarProducto(idProducto, nombreProducto, descripcion, precioUnitario);
                
                if (resultado) {
                    verTablaProductos();
                }
            }   
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un producto para actualizar.", "Error", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(txtNombreProducto, txaDescripcionProducto, txtPrecioProducto);
    }//GEN-LAST:event_btnActualizarProductosActionPerformed

    private void btnEliminarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProductosActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable7.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idProducto = (int) jTable7.getValueAt(filaSeleccionada, 0);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar el producto seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (confirmacion == JOptionPane.YES_OPTION) {
                ProductosDao productosDao = new ProductosDao();
                boolean resultado = productosDao.eliminarProducto(idProducto);

                if (resultado) {
                    verTablaProductos();
                    limpiar.limpiarCampos(txtNombreProducto, txaDescripcionProducto, txtPrecioProducto);
                }else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un producto de la tabla.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarProductosActionPerformed

    private void btnVisualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarProductosActionPerformed
        // TODO add your handling code here:
        verTablaProductos();
        JOptionPane.showMessageDialog(this, "Datos de productos actualizados.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnVisualizarProductosActionPerformed

    private void jTable8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable8MouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = jTable8.getSelectedRow();
        if (filaSeleccionada != -1) {
            String nombre = (String) jTable8.getValueAt(filaSeleccionada, 1);
            String telefono = (String) jTable8.getValueAt(filaSeleccionada, 2);
            String correo = (String) jTable8.getValueAt(filaSeleccionada, 3);
            String empresa = (String) jTable8.getValueAt(filaSeleccionada, 4);
            String direccion = (String) jTable8.getValueAt(filaSeleccionada, 5);

            txtNombreProovedor.setText(nombre);
            txtTelefonoProveedor.setText(telefono);
            txtCorreoProveedor.setText(correo);
            txtEmpresaProveedor.setText(empresa);
            txtDireccionProveedor.setText(direccion);
        }
    }//GEN-LAST:event_jTable8MouseClicked

    private void btnActualizarProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProveedoresActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable8.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idProveedor = (int) jTable8.getValueAt(filaSeleccionada, 0);
            String nombre = txtNombreProovedor.getText();
            String telefono = txtTelefonoProveedor.getText();
            String correo = txtCorreoProveedor.getText();
            String empresa = txtEmpresaProveedor.getText();
            String direccion = txtDireccionProveedor.getText();
            
            if(validarCamposProveedores()){
                ProveedoresDao proveedoresDao = new ProveedoresDao();
                boolean resultado = proveedoresDao.actualizarProveedor(idProveedor, nombre, telefono, correo, empresa, direccion);

                if (resultado) {
                    verTablaProveedores(); 
                }
            }  
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un proveedor de la tabla.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        limpiar.limpiarCampos(txtNombreProovedor, txtTelefonoProveedor, txtCorreoProveedor, txtEmpresaProveedor, txtDireccionProveedor);
    }//GEN-LAST:event_btnActualizarProveedoresActionPerformed

    private void btnEliminarProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProveedoresActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable8.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idProveedor = (int) jTable8.getValueAt(filaSeleccionada, 0);

            int respuesta = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar el proveedor seleccionado?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            
            if (respuesta == JOptionPane.YES_OPTION) {
                ProveedoresDao proveedoresDao = new ProveedoresDao();
                boolean resultado = proveedoresDao.eliminarProveedor(idProveedor);

                if (resultado) {
                    verTablaProveedores();
                    limpiar.limpiarCampos(txtNombreProovedor, txtTelefonoProveedor, txtCorreoProveedor, txtEmpresaProveedor, txtDireccionProveedor);
                }else {
                    JOptionPane.showMessageDialog(this, "No se pudo eliminar el proveedor.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un proveedor de la tabla.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarProveedoresActionPerformed

    private void btnVisualizarProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarProveedoresActionPerformed
        // TODO add your handling code here:
        verTablaProveedores(); 
        JOptionPane.showMessageDialog(this, "Datos de proveedores actualizados.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnVisualizarProveedoresActionPerformed
    
    private boolean validarCamposPacientes() {
        return validarCamp.validarCamposVacios(txtNombrePaciente, txtApellidoPatPaciente, txtApellidoMatPaciente, 
                                   txtTelefonoPaciente, txtCorreoPaciente, jdNacimientoPaciente, jdFechaRegistroPaciente) &&
               validarCamp.validarNumero(txtTelefonoPaciente, "El teléfono debe ser un número válido.");
    }

    private boolean validarCamposDentistas() {
        return validarCamp.validarCamposVacios(txtNombreDentista, txtApellidoPartDentista, txtApellidoMatDentista, 
                                   cbxEspecialidadDentista, txtTelefonoDentistas, txtCorreoDentista, txtHorarioAtencionDentista) &&
               validarCamp.validarNumero(txtTelefonoDentistas, "El teléfono debe ser un número válido.") &&
               validarCamp.validarFormatoHoraA(txtHorarioAtencionDentista, "El horario debe estar en formato HH:MM-HH:MM.") &&
               validarCamp.validarEspecialidad(cbxEspecialidadDentista);
    }

    private boolean validarCamposCitas() {
        return validarCamp.validarCamposVacios(cbxPacientesCitas, cbxDentistasCitas, jdFechaCita, txtHoraCita, txtMotivoCita) &&
               validarCamp.validarFormatoHora(txtHoraCita, "La hora debe estar en formato HH:MM.");
    }

    private boolean validarCamposHistorialMedico() {
        return validarCamp.validarCamposVacios(cbxPacientesHistorial, txAreaAlergias, txAreaEnfermedades, txAreaMedicacion, jpUltimaActHistorial);
    }

    private boolean validarCamposProveedores() {
        return validarCamp.validarCamposVacios(txtNombreProovedor, txtTelefonoProveedor, txtCorreoProveedor, txtEmpresaProveedor, txtDireccionProveedor);
    }

    private boolean validarCamposTratamientos() {
        return validarCamp.validarCamposVacios(cbxDentistasTratamientos, cbxNombreTratamiento, txtAreaDescripcion, txtMontoTotal) &&
               validarCamp.validarNumero(txtMontoTotal, "El monto total debe ser un número válido y mayor a 0.");
    }

    private boolean validarCamposPagos() {
        return validarCamp.validarCamposVacios(cbxTratamientoPagos, cbxMetodoPago, jdFechaPago, cbxModalidadPago, txtMontoPagado) &&
               validarCamp.validarNumero(txtMontoPagado, "El monto pagado debe ser un número válido y mayor a 0.");
    }

    private boolean validarCamposProductos() {
        return validarCamp.validarCamposVacios(txtNombreProducto, txaDescripcionProducto, txtPrecioProducto) &&
               validarCamp.validarNumero(txtPrecioProducto, "El precio del producto debe ser un número válido y mayor a 0.");
    }
    
    private void verTablaPacientes() {
        String sql = "SELECT * FROM Pacientes";
        String[] columnas = {"idPaciente", "Nombre", "ApellidoPaterno", "ApellidoMaterno", "FechaNacimiento", "Telefono", "Correo", "FechaRegistro"};
        visualizarTab.cargarDatos(jTable1, sql, columnas);
    }

    private void verTablaDentistas() {
        String sql = "SELECT * FROM Dentistas";
        String[] columnas = {"idDentista", "Nombre", "ApellidoPaterno", "ApellidoMaterno", "Especialidad", "Telefono", "Correo", "HorarioAtencion"};
        visualizarTab.cargarDatos(jTable9, sql, columnas);
    }

    private void verTablaCitas() {
        String sql = "SELECT * FROM Citas";
        String[] columnas = {"idCita", "idPaciente", "idDentista", "Fecha", "Hora", "Motivo", "Notas"};
        visualizarTab.cargarDatos(jTable3, sql, columnas);
    }

    private void verTablaHistorialMedico() {
        String sql = "SELECT hm.idHistorialMedico, p.Nombre, hm.Alergias, hm.Enfermedades, hm.Medicacion, hm.Observaciones, hm.UltimaActualizacion " +
                     "FROM HistorialMedico hm " +
                     "JOIN Pacientes p ON hm.idPaciente = p.idPaciente";
        String[] columnas = {"idHistorialMedico", "Nombre", "Alergias", "Enfermedades", "Medicacion", "Observaciones", "UltimaActualizacion"};
        visualizarTab.cargarDatos(jTable4, sql, columnas);
    }
    
    private void verTablaProveedores() {
        String sql = "SELECT * FROM Proveedores";
        String[] columnas = {"idProveedor", "Nombre", "Telefono", "Correo", "Empresa", "Direccion"};
        visualizarTab.cargarDatos(jTable8, sql, columnas);
    }

    private void verTablaTratamientos() {
        String sql = "SELECT t.idTratamiento, t.idDentista, t.Nombre AS NombreTratamiento, " +
                     "t.Descripcion, t.MontoTotal, pt.idPaciente, pt.FechaInicio, pt.FechaFin " +  // Aquí agregamos un espacio antes de "FROM"
                     "FROM Tratamientos t " +
                     "INNER JOIN PacientesTratamientos pt ON t.idTratamiento = pt.idTratamiento"; 
        String[] columnas = {"idTratamiento", "idDentista", "idPaciente", "NombreTratamiento", "Descripcion", "FechaInicio", "FechaFin", "MontoTotal"};
        visualizarTab.cargarDatos(jTable5, sql, columnas);
    }

    private void verTablaPagos() {
        String sql = "SELECT * FROM Pagos";
        String[] columnas = {"idPago", "idTratamiento", "MetodoPago", "FechaPago", "ModalidadPago", "MontoPagado"};
        visualizarTab.cargarDatos(jTable6, sql, columnas);
    }

    private void verTablaProductos() {
        String sql = "SELECT * FROM Productos";
        String[] columnas = {"idProducto", "NombreProducto", "Descripcion", "PrecioUnitario"};
        visualizarTab.cargarDatos(jTable7, sql, columnas);
    }
    
    public void llenarComboBox() {
        ComboBoxUtils.llenarComboBox(cbxPacientesCitas, "SELECT idPaciente, Nombre FROM Pacientes", "idPaciente", "Nombre");
        ComboBoxUtils.llenarComboBox(cbxPacientesHistorial, "SELECT idPaciente, Nombre FROM Pacientes", "idPaciente", "Nombre");
        ComboBoxUtils.llenarComboBox(cbxPacientesTratamientos, "SELECT idPaciente, Nombre FROM Pacientes", "idPaciente", "Nombre");
        ComboBoxUtils.llenarComboBox(cbxDentistasCitas, "SELECT idDentista, Nombre FROM Dentistas", "idDentista", "Nombre");
        ComboBoxUtils.llenarComboBox(cbxDentistasTratamientos, "SELECT idDentista, Nombre FROM Dentistas", "idDentista", "Nombre");
        ComboBoxUtils.llenarComboBox(cbxTratamientoPagos, "SELECT idTratamiento, Nombre FROM Tratamientos", "idTratamiento", "Nombre");
    }

    private int obtenerIdPacienteSeleccionado() {
        String seleccion = (String) cbxPacientesHistorial.getSelectedItem();
        if (seleccion != null) {
            String[] partes = seleccion.split(" - ");
            int idPaciente = Integer.parseInt(partes[0]); 
            return idPaciente;
        }
        return -1;  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarCitas;
    private javax.swing.JButton btnActualizarDentistas;
    private javax.swing.JButton btnActualizarHistorial;
    private javax.swing.JButton btnActualizarPacientes;
    private javax.swing.JButton btnActualizarPagos;
    private javax.swing.JButton btnActualizarProductos;
    private javax.swing.JButton btnActualizarProveedores;
    private javax.swing.JButton btnActualizarTratamiento;
    private javax.swing.JButton btnEliminarCitas;
    private javax.swing.JButton btnEliminarDentistas;
    private javax.swing.JButton btnEliminarHistorial;
    private javax.swing.JButton btnEliminarPacientes;
    private javax.swing.JButton btnEliminarPagos;
    private javax.swing.JButton btnEliminarProductos;
    private javax.swing.JButton btnEliminarProveedores;
    private javax.swing.JButton btnEliminarTratamiento;
    private javax.swing.JButton btnRegistarPagos;
    private javax.swing.JButton btnRegistrarCitas;
    private javax.swing.JButton btnRegistrarDentistas;
    private javax.swing.JButton btnRegistrarHistorial;
    private javax.swing.JButton btnRegistrarPacientes;
    private javax.swing.JButton btnRegistrarProducto;
    private javax.swing.JButton btnRegistrarProveedor;
    private javax.swing.JButton btnRegistrarTratamiento;
    private javax.swing.JButton btnVisualizarCitas;
    private javax.swing.JButton btnVisualizarDentistas;
    private javax.swing.JButton btnVisualizarHistorial;
    private javax.swing.JButton btnVisualizarPacientes;
    private javax.swing.JButton btnVisualizarPagos;
    private javax.swing.JButton btnVisualizarProductos;
    private javax.swing.JButton btnVisualizarProveedores;
    private javax.swing.JButton btnVisualizarTratamiento;
    private javax.swing.JComboBox<String> cbxDentistasCitas;
    private javax.swing.JComboBox<String> cbxDentistasTratamientos;
    private javax.swing.JComboBox<String> cbxEspecialidadDentista;
    private javax.swing.JComboBox<String> cbxMetodoPago;
    private javax.swing.JComboBox<String> cbxModalidadPago;
    private javax.swing.JComboBox<String> cbxNombreTratamiento;
    private javax.swing.JComboBox<String> cbxPacientesCitas;
    private javax.swing.JComboBox<String> cbxPacientesHistorial;
    private javax.swing.JComboBox<String> cbxPacientesTratamientos;
    private javax.swing.JComboBox<String> cbxTratamientoPagos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private com.toedter.calendar.JDateChooser jdFechaCita;
    private com.toedter.calendar.JDateChooser jdFechaPago;
    private com.toedter.calendar.JDateChooser jdFechaRegistroPaciente;
    private com.toedter.calendar.JDateChooser jdNacimientoPaciente;
    private com.toedter.calendar.JDateChooser jpFechaFinTrat;
    private com.toedter.calendar.JDateChooser jpFechaInicioTrat;
    private com.toedter.calendar.JDateChooser jpUltimaActHistorial;
    private javax.swing.JTextArea txAreaAlergias;
    private javax.swing.JTextArea txAreaEnfermedades;
    private javax.swing.JTextArea txAreaMedicacion;
    private javax.swing.JTextArea txAreaObservacion;
    private javax.swing.JTextArea txaDescripcionProducto;
    private javax.swing.JTextField txtApellidoMatDentista;
    private javax.swing.JTextField txtApellidoMatPaciente;
    private javax.swing.JTextField txtApellidoPartDentista;
    private javax.swing.JTextField txtApellidoPatPaciente;
    private javax.swing.JTextArea txtAreaDescripcion;
    private javax.swing.JTextArea txtAreaNotas;
    private javax.swing.JTextField txtCorreoDentista;
    private javax.swing.JTextField txtCorreoPaciente;
    private javax.swing.JTextField txtCorreoProveedor;
    private javax.swing.JTextField txtDireccionProveedor;
    private javax.swing.JTextField txtEmpresaProveedor;
    private javax.swing.JTextField txtHoraCita;
    private javax.swing.JTextField txtHorarioAtencionDentista;
    private javax.swing.JTextField txtMontoPagado;
    private javax.swing.JTextField txtMontoTotal;
    private javax.swing.JTextField txtMotivoCita;
    private javax.swing.JTextField txtNombreDentista;
    private javax.swing.JTextField txtNombrePaciente;
    private javax.swing.JTextField txtNombreProducto;
    private javax.swing.JTextField txtNombreProovedor;
    private javax.swing.JTextField txtPrecioProducto;
    private javax.swing.JTextField txtTelefonoDentistas;
    private javax.swing.JTextField txtTelefonoPaciente;
    private javax.swing.JTextField txtTelefonoProveedor;
    // End of variables declaration//GEN-END:variables
}
